// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(FlashyLearnContext))]
    [Migration("20230127044740_UpdatingDatabase")]
    partial class UpdatingDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Entities.FlashCard", b =>
                {
                    b.Property<Guid>("FlashCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<string>("FrontText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FlashCardID");

                    b.HasIndex("CategoryID");

                    b.ToTable("FlashCard");
                });

            modelBuilder.Entity("FlashCardTag", b =>
                {
                    b.Property<Guid>("FlashCardID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagID")
                        .HasColumnType("uuid");

                    b.HasKey("FlashCardID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("FlashCardTags", (string)null);
                });

            modelBuilder.Entity("Tag", b =>
                {
                    b.Property<Guid>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TagID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Domain.Entities.FlashCard", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("FlashCards")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FlashCardTag", b =>
                {
                    b.HasOne("Domain.Entities.FlashCard", null)
                        .WithMany()
                        .HasForeignKey("FlashCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tag", null)
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("FlashCards");
                });
#pragma warning restore 612, 618
        }
    }
}
