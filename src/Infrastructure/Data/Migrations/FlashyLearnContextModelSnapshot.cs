// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(FlashyLearnContext))]
    partial class FlashyLearnContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Name");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Entities.FlashCard", b =>
                {
                    b.Property<Guid>("FlashCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackText")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("FrontText")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FlashCardID");

                    b.HasIndex("CategoryID");

                    b.ToTable("FlashCards");
                });

            modelBuilder.Entity("Domain.Entities.FlashCardTag", b =>
                {
                    b.Property<Guid>("TagID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlashCardID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagID", "FlashCardID");

                    b.HasIndex("FlashCardID");

                    b.ToTable("FlashCardTags");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TagID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("FlashCardTag", b =>
                {
                    b.Property<Guid>("FlashCardsFlashCardID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsTagID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FlashCardsFlashCardID", "TagsTagID");

                    b.HasIndex("TagsTagID");

                    b.ToTable("FlashCardTag");
                });

            modelBuilder.Entity("Domain.Entities.FlashCard", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("FlashCards")
                        .HasForeignKey("CategoryID")
                        .IsRequired()
                        .HasConstraintName("FK_FlashCard_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.FlashCardTag", b =>
                {
                    b.HasOne("Domain.Entities.FlashCard", "FlashCard")
                        .WithMany("FlashCardTags")
                        .HasForeignKey("FlashCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag", "Tag")
                        .WithMany("FlashCardTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashCard");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FlashCardTag", b =>
                {
                    b.HasOne("Domain.Entities.FlashCard", null)
                        .WithMany()
                        .HasForeignKey("FlashCardsFlashCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("FlashCards");
                });

            modelBuilder.Entity("Domain.Entities.FlashCard", b =>
                {
                    b.Navigation("FlashCardTags");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Navigation("FlashCardTags");
                });
#pragma warning restore 612, 618
        }
    }
}
